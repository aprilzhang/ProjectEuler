/**
 * Each new term in the Fibonacci sequence is generated by adding the previous
 * two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5,
 * 8, 13, 21, 34, 55, 89, ... By considering the terms in the Fibonacci sequence
 * whose values do not exceed four million, find the sum of the even-valued
 * terms.
 * 
 * @author yuezhang
 *
 */
public class Problem2 {
	// direct solution
	public static long evenFibonacciNumbers(int limit) {
		long sum = 0;

		int a = 1;
		int b = 1;
		while (b <= limit) {
			if (b % 2 == 0) {
				sum += b;
			}
			final int temp = a;
			a = b;
			b += temp;
		}
		return sum;
	}

	// every third is even
	public static long evenFibonacciNumbers2(int limit) {
		long sum = 0;
		int a = 1;
		int b = 1;
		int c = a + b;
		while (c <= limit) {
			sum += c;
			a = b + c;
			b = c + a;
			c = a + b;
		}
		return sum;
	}

	// E(n)=4*E(n-1)+E(n-2)
	public static long evenFibonacciNumbers3(int limit) {

		int a = 0;
		int b = 2;
		long sum = 0;
		while (b <= limit) {
			sum += b;
			final int temp = a;
			a = b;
			b = 4 * a + temp;
		}
		return sum;
	}

	public static void main(String[] args) {
		System.out.println(evenFibonacciNumbers(100));
		System.out.println(evenFibonacciNumbers(4000000));
		System.out.println(evenFibonacciNumbers2(100));
		System.out.println(evenFibonacciNumbers2(4000000));
		System.out.println(evenFibonacciNumbers3(100));
		System.out.println(evenFibonacciNumbers3(4000000));
	}
}
